datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text //college email of student

  servers Server[] //server of college 
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {   //college server
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique    //college server unique invite code

  profileId String
  profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)

  members Member[]
  channels Channel[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST) 

  profileId String
  profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]
  posts Post[]
  comments Comment[]
  likes Like[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])

}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
  FEED
}

model Channel{
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT) 

  profileId String
  profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)

  messages Message[]
  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message { //model for the channel relations
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id],onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne",fields: [memberOneId],references: [id],onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo",fields: [memberTwoId],references: [id],onDelete: Cascade)

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberTwoId])

  @@unique([memberOneId,memberTwoId])
}

model DirectMessage{
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId],references: [id],onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model Comment {
  id String @id @default(uuid())
  content String @db.Text

  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  postId String
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([postId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id String  @id @default(uuid())
  
  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  postId String
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)


  @@index([memberId])
  @@index([postId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Post{
  id String @id @default(uuid())
  content   String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id],onDelete: Cascade)

  comments  Comment[]
  likes Like[]

  @@index([memberId])
  @@index([channelId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}